{"version":3,"file":"static/js/247.d214128b.chunk.js","mappings":"kPAuDA,UAhDa,WACX,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAO,mCAAG,gHAEWC,EAAAA,EAAAA,GAAW,SAAD,OAAUN,EAAV,aAFrB,gBAEJO,EAFI,EAEJA,KACRH,EAAQG,EAAKJ,MAHD,gDAKZK,MAAM,EAAD,IALO,yDAAH,qDAcb,OALAC,EAAAA,EAAAA,YAAU,WACRJ,GAED,GAAE,CAACL,IAEiB,KAAb,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMO,SACD,yEAEFP,GACL,wBACGA,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACR,yBACE,2BACGD,IACC,gBACEE,IACEF,EAAY,yCAC0BA,GAClCG,EAENC,IAAKL,EACLM,MAAM,QACNC,OAAO,WAGX,wBAAKP,KACL,wCAAgBE,SAfXF,EADD,OAsBZ,SAAC,IAAD,GAEH,C,gFC/CD,E,QALYQ,GAAAA,IAAH,uE,SCiBT,EAhBe,kBACb,SAAC,EAAD,WACE,SAAC,KAAD,CACEC,SAAS,EACTF,OAAO,MACPD,MAAM,MACNI,UAAU,cACVC,aAAc,CAAC,EACfC,aAAa,iBARJ,C,qFCDTC,EAAY,+BAEHnB,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAA0BoB,EAA1B,+BAAgC,uBAAwBC,EAAxD,uBACQC,EAAS,CACbF,IAAKA,EACLG,OAAQ,MACRC,QAASL,EACTE,QAAO,QACLI,QAAS,mCACTC,MAAO,GACPC,KAAM,GACHN,GAELO,aAAc,QAXlB,kBAc2BC,IAAMP,GAdjC,cAcUQ,EAdV,yBAeWA,GAfX,+HAqBA,IAvBA,WAEe9B,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C","sources":["components/Cast/Cast.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","helpers/helpers.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fallback from '../../assets/fallback.png';\n\nimport getApiData from 'helpers/helpers';\nimport Loader from 'components/Loader';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState(null);\n\n  const getCast = async () => {\n    try {\n      const { data } = await getApiData(`movie/${id}/credits`);\n      setCast(data.cast);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    getCast();\n    // eslint-disable-next-line\n  }, [id]);\n\n  if (cast?.length === 0) {\n    return <p>We don`t have info about cast for this movies</p>;\n  }\n  return cast ? (\n    <ul>\n      {cast.map(({ name, profile_path, character }) => (\n        <li key={name}>\n          <div>\n            {profile_path && (\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : fallback\n                }\n                alt={name}\n                width=\"150px\"\n                height=\"200px\"\n              />\n            )}\n            <h4>{name}</h4>\n            <p> Character: {character}</p>\n          </div>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <Loader />\n  );\n};\nexport default Cast;\n","import styled from 'styled-components';\n\nconst Div = styled.div`\n  margin-left: auto;\n\n  margin-right: auto;\n`;\nexport default Div;\n","// import PropTypes from 'prop-types'; // ES6\nimport { Dna } from 'react-loader-spinner';\nimport Div from './Loader.styled';\nconst Loader = () => (\n  <Div>\n    <Dna\n      visible={true}\n      height=\"800\"\n      width=\"800\"\n      ariaLabel=\"dna-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"dna-wrapper\"\n    />\n  </Div>\n);\n\n// Loader.propTypes = {\n//   isLoading: PropTypes.bool.isRequired,\n// };\nexport default Loader;\n","import axios from 'axios';\n\nconst END_POINT = 'https://api.themoviedb.org/3';\n\nasync function getApiData(url = '/trending/movie/day?', params) {\n  const config = {\n    url: url,\n    method: 'get',\n    baseURL: END_POINT,\n    params: {\n      api_key: '3fc6ca0bd9b1eeabb3151f08c61a1e25',\n      query: '',\n      page: 1,\n      ...params,\n    },\n    responseType: 'json',\n  };\n  try {\n    const response = await axios(config);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport default getApiData;\n"],"names":["id","useParams","useState","cast","setCast","getCast","getApiData","data","alert","useEffect","length","map","name","profile_path","character","src","fallback","alt","width","height","styled","visible","ariaLabel","wrapperStyle","wrapperClass","END_POINT","url","params","config","method","baseURL","api_key","query","page","responseType","axios","response"],"sourceRoot":""}